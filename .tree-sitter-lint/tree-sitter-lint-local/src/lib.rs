use std :: { any :: TypeId , path :: { Path , PathBuf } , sync :: { Arc , mpsc } } ; use tree_sitter_lint :: { better_any :: Tid , clap :: Parser , tree_sitter :: Tree , tree_sitter_grep :: { RopeOrSlice , SupportedLanguage } , Args , Config , FileRunContext , FromFileRunContextInstanceProvider , FromFileRunContextInstanceProviderFactory , FromFileRunContextProvidedTypes , FromFileRunContextProvidedTypesOnceLockStorage , MutRopeOrSlice , Plugin , Rule , ViolationWithContext , lsp :: { LocalLinter , self } , FixingForSliceRunStatus , FixingForSliceRunContext , } ; pub fn run_and_output () { tree_sitter_lint :: run_and_output (args_to_config (Args :: parse ()) , & FromFileRunContextInstanceProviderFactoryLocal ,) ; } pub fn run_for_slice < 'a > (file_contents : impl Into < RopeOrSlice < 'a >> , tree : Option < Tree > , path : impl AsRef < Path > , args : Args , language : SupportedLanguage ,) -> Vec < ViolationWithContext > { let path = path . as_ref () ; tree_sitter_lint :: run_for_slice (file_contents , tree , path , args_to_config (args) , language . supported_language_language (Some (path)) , & FromFileRunContextInstanceProviderFactoryLocal ,) . 0 } pub fn run_fixing_for_slice < 'a > (file_contents : impl Into < MutRopeOrSlice < 'a >> , tree : Option < Tree > , path : impl AsRef < Path > , args : Args , language : SupportedLanguage , context : FixingForSliceRunContext ,) -> FixingForSliceRunStatus { let path = path . as_ref () ; tree_sitter_lint :: run_fixing_for_slice (file_contents , tree , path , args_to_config (args) , language . supported_language_language (Some (path)) , & FromFileRunContextInstanceProviderFactoryLocal , context ,) } struct LocalLinterConcrete ; impl LocalLinter for LocalLinterConcrete { fn run_for_slice < 'a > (& self , file_contents : impl Into < RopeOrSlice < 'a >> , tree : Option < Tree > , path : impl AsRef < Path > , args : Args , language : SupportedLanguage ,) -> Vec < ViolationWithContext > { run_for_slice (file_contents , tree , path , args , language) } fn run_fixing_for_slice < 'a > (& self , file_contents : impl Into < MutRopeOrSlice < 'a >> , tree : Option < Tree > , path : impl AsRef < Path > , args : Args , language : SupportedLanguage , context : FixingForSliceRunContext ,) -> FixingForSliceRunStatus { run_fixing_for_slice (file_contents , tree , path , args , language , context) } } pub async fn run_lsp (start_new_trace_sender : Option < mpsc :: Sender < PathBuf >>) { lsp :: run (LocalLinterConcrete , start_new_trace_sender) . await ; } fn args_to_config (args : Args) -> Config { args . load_config_file_and_into_config (all_plugins () , all_standalone_rules ()) } fn all_plugins () -> Vec < Plugin > { vec ! [tree_sitter_lint_plugin_replace_foo_with :: instantiate ()] } fn all_standalone_rules () -> Vec < Arc < dyn Rule >> { local_rules :: get_rules () } struct FromFileRunContextInstanceProviderFactoryLocal ; impl FromFileRunContextInstanceProviderFactory for FromFileRunContextInstanceProviderFactoryLocal { fn create < 'a > (& self) -> Box < dyn FromFileRunContextInstanceProvider < 'a > + 'a > { Box :: new (FromFileRunContextInstanceProviderLocal { tree_sitter_lint_plugin_replace_foo_with_provided_instances : tree_sitter_lint_plugin_replace_foo_with :: ProvidedTypes :: < 'a > :: once_lock_storage () }) } } struct FromFileRunContextInstanceProviderLocal < 'a > { tree_sitter_lint_plugin_replace_foo_with_provided_instances : < tree_sitter_lint_plugin_replace_foo_with :: ProvidedTypes :: < 'a > as FromFileRunContextProvidedTypes :: < 'a >> :: OnceLockStorage } impl < 'a > FromFileRunContextInstanceProvider < 'a > for FromFileRunContextInstanceProviderLocal < 'a > { fn get (& self , type_id : TypeId , file_run_context : FileRunContext < 'a , '_ > ,) -> Option < & dyn Tid < 'a >> { self . tree_sitter_lint_plugin_replace_foo_with_provided_instances . get (type_id , file_run_context) } }